swagger: "2.0"

info:
  version: "1.0.0"
  title: "Polling Booth"
  description: "API of Polling Booth"

schemes:
- "http"
host: "localhost:3000"
basePath: "/"

securityDefinitions:
  authentication:
    type: apiKey
    name: Authorization
    in: header

tags:
- name: "user"
- name: "election"
- name: "candidate"
- name: "ballot"

paths:
  /users/verification-code:
    post:
      tags:
        - "user"
      summary: "Fetchs verification code"
      parameters:
      - in: "formData"
        name: "email"
        schema:
          type: "string"
        required: true
      responses:
        200:
          description: "Success"
          example: "{ code: 200, message: 'success' }"
        1001:
          description: "Too frequent requests"
          example: "{ code: 1001, message: 'too frequent requests' }"
        422:
          description: "Unprocessable entity"

  /users/register:
    post:
      tags:
      - "user"
      summary: "Register"
      parameters:
      - in: "formData"
        name: "email"
        schema:
          type: "string"
        required: true
      - in: "formData"
        name: "fullname"
        schema:
          type: "string"
        required: true
      - in: "formData"
        name: "password"
        schema:
          type: "string"
        required: true
      - in: "formData"
        name: "verificationCode"
        schema:
          type: "string"
        required: true
      responses:
        200:
          description: "Success"
          example: "{ code: 200, message: 'success', data: { user: {}, token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoxMjMsImlhdCI6MTQ5MTQ3NTQyNCwiZXhwIjoxNDkxNDc1NDg0fQ.hYNC4qFAyhZClmPaLixfN137d41R2CFk1xPlfLK10JU' } }"
        1001:
          description: "Verification code is incorrect"
          example: "{ code: 1001, message: 'verification code is incorrect' }"
        1002:
          description: "Email address already in use"
          example: "{ code: 1002, message: 'email address already in use' }"
        422:
          description: "Unprocessable entity"

  /users/login:
    post:
      tags:
        - "user"
      summary: "Login"
      parameters:
      - in: "formData"
        name: "email"
        schema:
          type: "string"
        required: true
      - in: "formData"
        name: "password"
        schema:
          type: "string"
        required: true
      responses:
        200:
          description: "Success"
          example: "{ code: 200, message: 'success', data: { user: {}, token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoxMjMsImlhdCI6MTQ5MTQ3NTQyNCwiZXhwIjoxNDkxNDc1NDg0fQ.hYNC4qFAyhZClmPaLixfN137d41R2CFk1xPlfLK10JU' } }"
        1001:
          description: "User does not exist"
          example: "{ code: 1001, message: 'user does not exist' }"
        1002:
          description: "Password is incorrect"
          example: "{ code: 1002, message: 'password is incorrect' }"
        422:
          description: "Unprocessable entity"

  /elections:
    get:
      tags:
        - "election"
      summary: "List elections"
      parameters:
      - in: "query"
        name: "cursor"
        schema:
          type: "integer"
      - in: "query"
        name: "limit"
        schema:
          type: "integer"
      responses:
        200:
          description: "Success"
          example: "{ code: 200, message: 'success', data: { elections: [] } }"
    post:
      tags:
        - "election"
      security:
        - authentication: []
      summary: "Create election"
      parameters:
      - in: "formData"
        name: "title"
        schema:
          type: "string"
        required: true
      - in: "formData"
        name: "description"
        schem:
          type: "string"
        required: true
      - in: "formData"
        name: "startTime"
        schema:
          type: "integer"
        required: true
      - in: "formData"
        name: "endTime"
        schema:
          type: "integer"
        required: true
      - in: "formData"
        name: "disabled"
        schema:
          type: "boolean"
        required: true
      responses:
        200:
          description: "Success"
          example: "{ code: 200, message: 'success', data: { election: {} } }"
        422:
          description: "Unprocessable entity"

  '/elections/{id}':
    parameters:
    - in: "path"
      name: "id"
      required: true
      schema:
        type: "integer"
    get:
      tags:
        - "election"
      summary: "Show election"
      responses:
        200:
          description: "Success"
          example: "{ code: 200, message: 'success', data: { election: {} } }"
    patch:
      tags:
        - "election"
      security:
        - authentication: []
      summary: "Update election"
      parameters:
      - in: "formData"
        name: "title"
        schema:
          type: "string"
        required: true
      - in: "formData"
        name: "description"
        schem:
          type: "string"
        required: true
      - in: "formData"
        name: "startTime"
        schema:
          type: "integer"
        required: true
      - in: "formData"
        name: "endTime"
        schema:
          type: "integer"
        required: true
      - in: "formData"
        name: "disabled"
        schema:
          type: "boolean"
        required: true
      responses:
        200:
          description: "Success"
          example: "{ code: 200, message: 'success', data: { election: {} } }"
        422:
          description: "Unprocessable entity"

  /elections/{electionId}/candidates:
    parameters:
    - in: "path"
      name: "electionId"
      required: true
      schema:
        type: "integer"
    get:
      tags:
        - "candidate"
      security:
        - authentication: []
      summary: "List candidates of election"
      parameters:
      - in: "query"
        name: "cursor"
        schema:
          type: "integer"
      - in: "query"
        name: "limit"
        schema:
          type: "integer"
      responses:
        200:
          description: "Success"
          example: "{ code: 200, message: 'success', data: { candidates: [] } }"
    post:
      tags:
        - "candidate"
      security:
        - authentication: []
      summary: "Create candidate"
      parameters:
      - in: "formData"
        name: "fullname"
        schema:
          type: "string"
        required: true
      - in: "formData"
        name: "avatar"
        schema:
          type: "string"
        required: true
      - in: "formData"
        name: "introduction"
        schema:
          type: "string"
        required: true
      responses:
        200:
          description: "Success"
          example: "{ code: 200, message: 'success', data: { candidate: {} } }"
        1101:
          description: "Election has been started"
          example: "{ code: 1101, message: 'election has been started' }"
        422:
          description: "Unprocessable entity"

  '/elections/{electionId}/candidates/{id}':
    parameters:
    - in: "path"
      name: "electionId"
      required: true
      schema:
        type: "integer"
    - in: "path"
      name: "id"
      required: true
      schema:
        type: "integer"
    get:
      tags:
        - "candidate"
      summary: "Show candidate"
      responses:
        200:
          description: "Success"
          example: "{ code: 200, message: 'success', data: { candidate: {} } }"
    patch:
      tags:
        - "candidate"
      security:
        - authentication: []
      summary: "Update candidate"
      parameters:
      - in: "formData"
        name: "fullname"
        schema:
          type: "string"
        required: true
      - in: "formData"
        name: "avatar"
        schema:
          type: "string"
        required: true
      - in: "formData"
        name: "introduction"
        schema:
          type: "string"
        required: true
      responses:
        200:
          description: "Success"
          example: "{ code: 200, message: 'success', data: { candidate: {} } }"
        422:
          description: "Unprocessable entity"
    delete:
      tags:
        - "candidate"
      security:
        - authentication: []
      summary: "Destroy candidate"
      responses:
        200:
          description: "Success"
          example: "{ code: 200, message: 'success' }"

  /elections/{electionId}/ballots:
    parameters:
    - in: "path"
      name: "electionId"
      required: true
      schema:
        type: "integer"
    post:
      tags:
        - "ballot"
      security:
        - authentication: []
      summary: "Create ballots"
      parameters:
      - in: "formData"
        name: "candidateIds"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "Success"
          example: "{ code: 200, message: 'success' }"
        1001:
          description: "At least one ballot"
          example: "{ code: 1001, message: 'at least one ballot' }"
        1002:
          description: "Exceed maximum ballots"
          example: "{ code: 1002, message: 'exceed maximum ballots' }"
        1003:
          description: "Contains nonexistent candidate ids"
          example: "{ code: 1002, message: 'contains nonexistent candidate ids' }"
        1101:
          description: "Election is disabled"
          example: "{ code: 1101, message: 'election is disabled' }"
        1102:
          description: "Election haven't started yet"
          example: "{ code: 1102, message: 'election haven't started yet' }"
        1103:
          description: "Election has been ended"
          example: "{ code: 1103, message: 'election has been ended' }"
        1104:
          description: "Already voted"
          example: "{ code: 1104, message: 'already voted' }"
        422:
          description: "Unprocessable entity"
    get:
      tags:
        - "ballot"
      security:
        - authentication: []
      summary: "List ballots"
      parameters:
      - in: "query"
        name: "cursor"
        schema:
          type: "integer"
      - in: "query"
        name: "limit"
        schema:
          type: "integer"
      responses:
        200:
          description: "Success"
          example: "{ code: 200, message: 'success', data: { ballots: [] } }"
